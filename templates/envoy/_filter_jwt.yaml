{{- define "titan-mesh-helm-lib-chart.envoy.filter.jwt" }}
  {{- $requests := .requests  }}
  {{- $issuers := .issuers  }}
  {{- $localMyApp := .localMyApp  }}
  {{- $clusters := .clusters }}
  {{- $providers := list  }}
  {{- $requestsTokenCheck := ternary $requests.tokenCheck false (hasKey $requests "tokenCheck") }}
  {{- $tokenValidation := $requestsTokenCheck }}
  {{- $tokenValidationBypass := not $tokenValidation }}
  {{- $gatewayEnable := false }}
  {{- if $localMyApp.gateway  -}}
    {{- $gatewayEnable = ternary $localMyApp.gateway.enabled true (hasKey $localMyApp.gateway "enabled") }}
  {{- end }}
  {{- $routes := $requests.routes }}
  {{- if and $localMyApp (not $routes) }}
    {{- if ternary $requests.enabled true (hasKey $requests "enabled") }}
      {{ $routes = $localMyApp.routes }}
    {{- end }}
  {{- end }}  
  {{- $additionalRoutes := $requests.additionalRoutes }}
  {{- if $additionalRoutes }}
    {{- if $routes }}
      {{- $routes = concat $additionalRoutes $routes }}
    {{- else }}
      {{- $routes = $additionalRoutes }}
    {{- end }}
  {{- end }}
  {{- if $gatewayEnable }}
    {{- if not $routes }}
      {{- $routes = list }}
    {{- end }}
    {{- range $cn, $cv := $clusters }}
      {{- if and (ne $cn "local-myapp") (ne $cn "remote-myapp") }}
        {{- range $cv.routes }}
          {{- $route := dict -}}
          {{- if .match }}
            {{- $_ := set $route "match" .match }}
          {{- end }}
          {{- if .route }}
            {{- $routeValue := .route }}
            {{- $_ := set $routeValue "cluster" $cn }}
            {{- $_ := set $route "route" $routeValue }}
          {{- else }}
            {{- $_ := set $route "route" (dict "cluster" $cn) }}
          {{- end }}
          {{- if .tokenCheck }}
            {{- $_ := set $route "tokenCheck" .tokenCheck }}
          {{- end }}
          {{- if $route }}
            {{- $routes = append $routes $route }}
          {{- end }}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
  {{- range $routes  }}
    {{- $tokenCheck := ternary .tokenCheck (default $requestsTokenCheck) (hasKey . "tokenCheck")  }}
    {{- $tokenBypass := ternary (not .tokenCheck) (not $requestsTokenCheck) (hasKey . "tokenCheck")  }}
    {{- if $tokenCheck  }}
      {{- $tokenValidation = true  }}
    {{- end  }}
    {{- if $tokenBypass  }}
      {{- $tokenValidationBypass = true  }}
    {{- end  }}
  {{- end  }}
  {{- if $tokenValidation }}
- name: envoy.filters.http.jwt_authn
  typed_config:
    "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
    providers:
    {{- range $issuers }}
      {{- $provider := printf "provider-%s" (adler32sum .issuer)  }}
      {{- $providers = append $providers $provider  }}
      {{ $provider }}:
        forward: true
        issuer: {{ required "value 'titanSideCars.issuers[].issuer' is required" .issuer }}
        from_headers:
        - name: Authorization
          value_prefix: "Bearer "
      {{- if .locations  }}
        {{- range .locations.fromHeaders }}
          {{- if and (ne .name "Authorization") (ne .valuePrefix "Bearer ") }}
        - name: {{ .name }}
              {{- if .valuePrefix }}
          value_prefix: {{ .valuePrefix | quote }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- if .locations.fromParams }}
        from_params:
          {{- range .locations.fromParams }}
        - {{ . }}
          {{- end }}
        {{- end }}
      {{- end }}
        remote_jwks:
          cache_duration:
            seconds: {{ .cacheDuration | default "31556952" }} 
          http_uri:
            uri: {{ required "value 'titanSideCars.issuers[].jwks' is required to retrieve issuer's public keys" .jwks }}
            cluster: {{ .cluster }}
            timeout:
              seconds: {{ .timeout | default "1" }}
    {{- end }}
    rules:
    {{- if $tokenValidationBypass }}
      {{- range $routes }}
        {{- if hasKey . "tokenCheck" }}
          {{- if or (and .tokenCheck (not $requestsTokenCheck)) (and (not .tokenCheck) $requestsTokenCheck) }}
    - match:
            {{- include "titan-mesh-helm-lib-chart.envoy.matcher-route" (dict "route" .match "routing" true) | nindent 6 }}
            {{- if .tokenCheck }}
      requires:
              {{- if eq (len $providers) 1 }}
        provider_name: {{ first $providers }}
              {{- else }}
        requires_any:
          requirements:
                {{- range $providers }}
          - provider_name: {{ . }}
                {{- end }}              
              {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}
      {{- end }}
    - match:
        prefix: /
      {{- if $requestsTokenCheck }}
      requires:
        {{- if eq (len $providers) 1 }}
        provider_name: {{ first $providers }}
        {{- else }}
        requires_any:
          requirements:
          {{- range $providers }}
          - provider_name: {{ . }}
          {{- end }}
        {{- end }}
      {{- end }}
    {{- else }}
    - match:
        prefix: /
      requires:
      {{- if eq (len $providers) 1 }}
        provider_name: {{ first $providers }}
      {{- else }}
        requires_any:
          requirements:
        {{- range $providers }}
          - provider_name: {{ . }}
        {{- end }}              
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}